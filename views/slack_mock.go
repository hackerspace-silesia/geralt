// Code generated by mockery v2.12.1. DO NOT EDIT.

package views

import (
	slack "github.com/slack-go/slack"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// SlackClientMock is an autogenerated mock type for the SlackClient type
type SlackClientMock struct {
	mock.Mock
}

// SendMessage provides a mock function with given fields: channel, options
func (_m *SlackClientMock) SendMessage(channel string, options ...slack.MsgOption) (string, string, string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channel)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...slack.MsgOption) string); ok {
		r0 = rf(channel, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, ...slack.MsgOption) string); ok {
		r1 = rf(channel, options...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string, ...slack.MsgOption) string); ok {
		r2 = rf(channel, options...)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, ...slack.MsgOption) error); ok {
		r3 = rf(channel, options...)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// NewSlackClientMock creates a new instance of SlackClientMock. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSlackClientMock(t testing.TB) *SlackClientMock {
	mock := &SlackClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
